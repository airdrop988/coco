import { FormContext, Button } from '@bpmn-io/form-js';
import { useContext } from "preact/hooks";
import { html } from "htm/preact";
import '@cof/gds-button-wc/define';
import '@cof/gds-icon-wc/define';
import { iconsByType } from '@bpmn-io/form-js';

export const gravityButtonIdType = 'gravityButtonField';

export function prefixField(id, formId) {
  if (formId) {
    return `fjs-form-${formId}-field-${id}`;
  }
  
  return `fjs-form-${id}`;
}

export function GravityButtonRenderer(props) {
  const {
    field,
    disabled
  } = props;

  const {
    label = 'Button',
    description,
    size = 'medium',
    rank = 'secondary',
    loading = false,
    appearance = 'default',
    readonly = false,
    iconName,
    iconLeft = 'icon-trailing',
    textFieldButton = false,
    buttonType = 'button',
    name,
    value,
    validateOnLabel,
    href,
    download,
    target,
    rel,
    fullWidth = false,
    prefix,
    suffix,
    apiUrl,
    onClickType,
    methodName,
    disabledWithFormValid = true,
    id
  } = field;

  const { formId, formData } = useContext(FormContext);

  const isFormValid = () => {
    if (!disabledWithFormValid) return true;
    const data = formData || {};
    return Object.keys(data).some(key => (
      data[key] !== null && data[key] !== undefined && data[key] !== ''
    ));
  };

  const callDownloadMethod = async (methodName, ...args) => {
    try {
      const methodParts = methodName.split('.');
      let context = window;
      let func = window;
      
      for (const part of methodParts) {
        if (typeof context[part] === 'object' || typeof context[part] === 'function') {
          context = context[part];
          if (typeof context === 'function') {
            func = context;
            break;
          }
        } else {
          throw new Error(`Property ${part} not found`);
        }
      }
      
      if (typeof func === 'function') {
        console.log('calling method:', methodName);
        return await func.apply(context, args);
      } else {
        throw new Error(`Method not found or not a function: ${methodName}`);
      }
    } catch (error) {
      console.error(`Error calling method ${methodName}:`, error);
      window.dispatchEvent(new CustomEvent('contextEvents', {
        detail: { methodName, errors: error.message, formData, fieldId: field.id }
      }));
      throw error;
    }
  };

  const callAPI2 = async (formData) => {
    if (!apiUrl) {
      console.warn('No API URL provided');
      return;
    }
    
    const response = await fetch(apiUrl, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(formData)
    });
    
    if (!response.ok) {
      const error = await response.json();
      console.error('API call failed:', error);
      window.dispatchEvent(new CustomEvent('contextEvent', {
        detail: { formId, formData, error: error.message }
      }));
      throw error;
    }
    
    return response.json();
  };

  const onClick = async (event) => {
    console.log('Button clicked!', { buttonType, field });
    
    // Update form data with button value
    if (value !== undefined) {
      props.onChange && props.onChange(value);
    }
    
    // Handle different button types
    if (buttonType === 'submit' || onClickType === 'submit') {
      event.preventDefault();
      
      if (apiUrl) {
        try {
          await callAPI2(formData || {});
        } catch (error) {
          console.error('API call failed:', error);
          return;
        }
      }
      
      if (formData && typeof formData.submit === 'function') {
        try {
          formData.submit();
        } catch (error) {
          console.error('Form submission failed:', error);
        }
      } else {
        // Fire submit dispatch submit event
        const form = event.target.closest('form');
        if (form) {
          form.dispatchEvent(new Event('submit', { bubbles: true, cancelable: true }));
        }
      }
    } else if (buttonType === 'reset' || onClickType === 'reset') {
      event.preventDefault();
      
      if (formData && typeof formData.reset === 'function') {
        try {
          formData.reset();
        } catch (error) {
          console.error('Form reset failed:', error);
        }
      } else {
        // Fire form dispatch reset event
        const form = event.target.closest('form');
        if (form) {
          form.dispatchEvent(new Event('reset', { bubbles: true, cancelable: true }));
        }
      }
      
      window.dispatchEvent(new CustomEvent('field.onClick', { 
        detail: { formData, formId, event }
      }));
    } else {
      // Handle custom onClick for regular buttons
      if (methodName) {
        try {
          await callDownloadMethod(methodName, formData, field, event);
        } catch (error) {
          console.error('Method call failed:', error);
        }
      }
      
      if (field.onClick) {
        if (typeof field.onClick === 'function') {
          try {
            field.onClick(event, formData, field);
          } catch (error) {
            console.log('Response action:', field.onClick(), ' Custom event');
            window.dispatchEvent(new CustomEvent('formButtonClick', {
              detail: {
                fieldId: field.id,
                formId: formId,
                formData: formData || {}
              }
            }));
          }
        }
      }
    }
  };

  const prefixedLabel = prefix ? `${prefix} ${label}` : label;
  const isDisabled = disabled || (disabledWithFormValid && !isFormValid()) || readonly;

  const getIconSize = () => {
    switch (size) {
      case 'large': return 'large';
      case 'medium': return 'medium';
      default: return 'small';
    }
  };

  return html`
    <div
      className="gravity-button-container"
      style=${{
        display: 'flex',
        flexDirection: 'column',
        gap: description ? '8px' : '0',
        margin: '8px 0',
        width: fullWidth ? '100%' : 'fit-content',
        alignItems: fullWidth ? 'stretch' : 'flex-start'
      }}
    >
      
      <gs-button
        style=${{
          cursor: isDisabled ? 'not-allowed' : 'pointer',
          width: fullWidth ? '100%' : 'auto',
          minWidth: 'fit-content',
          border: rank === 'outline' ? '1px solid' : 'none',
          display: fullWidth ? 'block' : 'inline-block'
        }}
      >
        <style>
          .gravity-button-container.${prefixField(id, formId)} gs-button {
            opacity: ${isDisabled ? '0.6' : '1'};
          }
          
          .gravity-button-container.${prefixField(id, formId)} .button-description {
            font-size: 14px;
            color: #666;
            margin-top: 4px;
          }
        </style>
        
        <gs-button
          type="${buttonType}"
          rank="${rank}"
          size="${size}"
          appearance="${appearance}"
          ?readonly="${readonly}"
          ?disabled="${isDisabled}"
          ?loading="${loading}"
          iconLeft="${iconLeft}"
          ?downloading="${loading}"
          textFieldButton="${textFieldButton}"
          name="${name || undefined}"
          value="${value || undefined}"
          ?validateOnLabel="${validateOnLabel || undefined}"
          href="${href || undefined}"
          ?download="${download || undefined}"
          target="${target || undefined}"
          rel="${rel || undefined}"
          onClick="${onClick}"
          className="${fullWidth ? 'full-width-button' : ''}"
          style="${fullWidth ? 'width: 100%; display: block;' : ''}"
        >
          ${iconLeft && iconName && html`
            <gb-icon 
              name="${iconName}" 
              size="${getIconSize()}" 
              color="currentColor"
            />
          `}
          ${prefixedLabel}
          ${!iconLeft && iconName && html`
            <gb-icon 
              name="${iconName}" 
              size="${getIconSize()}" 
              color="currentColor"
            />
          `}
        </gs-button>
        
        ${description && html`<div className="button-description">${description}</div>`}
      </gs-button>
    </div>
  `;
}

// Component configuration
GravityButtonRenderer.config = {
  type: gravityButtonIdType,
  displayName: 'Button',
  name: 'Button',
  group: 'gravity',
  iconName: 'icon-button',
  keyof: true,
  ariaLabelledBy: true,
  properties: {
    textfield: {
      label: 'Field label',
      description: { 'type': 'rank', 'loading': 'appearance' }
    },
    icon: { 'iconLeft': 'iconList', 'textFieldButton': true, 'buttonType': true },
    data: { 'value': 'defaultValue' },
    layout: { 'size': 'medium' }
  },
  create: (options = {}) => ({
    type: gravityButtonIdType,
    label: 'Button',
    description: '',
    size: 'medium',
    rank: 'secondary',
    loading: false,
    appearance: 'default',
    iconName: false,
    iconLeft: 'icon-trailing',
    textFieldButton: false,
    buttonType: 'button',
    name: '',
    value: '',
    validateOnLabel: '',
    href: '',
    download: '',
    target: '',
    rel: undefined,
    fullWidth: false,
    prefix: '',
    suffix: '',
    readonly: false,
    apiUrl: '',
    onClickType: '',
    disabledWithFormValid: true,
    methodName: '',
    id: options.id || `gravity-button-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`,
    ...options
  }),
  validate: () => null
};
