import moment from "moment";
import React, { Component } from "react";
import autoBind from "react-autobind";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { configSetup, newFormBind, tableEntryUpdate } from "../../../../../../javascript/config";
import { fetchConfig } from "./config/config";
import API from '../../../api';

import { 
    objectExists, 
    traverseFormToBindValue, 
    cloneObject,
    traverseObjectAndReturn,
    traverseObject 
} from "../../../../../../javascript/utility";

import { mixinCheckGlobalConditions, mixinIsFormValid, mixinToggleModal } from "../../../../../../javascript/mixins";

import { Spinner, Dialog, DialogContent, DialogActions, Button, Icon } from "@jpmuitk/components";
import { DataGrid } from "@jpmuitk/data-grid";

import Buttons from "../../../../../Common/Buttons/Buttons";
import FormBuilder from "../../../../../Common/FormBuilder";
import Header from "../../../../../Common/Header/Header";
import AddOnProduct from "../../../../../Common/AddOnProduct/AddOnProduct"; 

import * as appStateAction from "../../../../../../actions/appStateAction";
import { isReadWrite } from "../../../../../../javascript/entitlementUtils";
import { MessageBox } from "../../../../../Common/messagebox";

let selectedRowIdx = null;

class XMProfileFields extends Component {
    constructor(props) {
        super(props);

        this.gridApiRefs = {};

        this.state = {
            permissions: {
                readonly: this.getPermission(props),
            },
            config: null,
            toggleState: true,
            ready: true,
            selectedRows: [],
            modal: {
                disabled: null,
                show: false,
                header: {},
                formdata: null,
                onUpdate: () => { },
                onSave: () => { },
            },
            resetFormFields: {
                resetIfSelected: [{ field: "frequency", value: "*" }],
                resetExclude: ["frequency"],
            },
        };

        this.bindedEvents = {
            CREATE_NEW_MASTER_AGREEMENT: () => {
                const data = this.props.data || this.props.profileData || {};
                let newEntry = null;
                
                selectedRowIdx = null;
                
                this.toggleModal({
                    state: true,
                    header: { title: 'Add New Master Agreement' },
                    formdata: newFormBind({ formdata: this.state.config.create.newMasterAgreements }),
                    onUpdate: (newdata) => {
                        newEntry = tableEntryUpdate({ newdata, markSource: true });
                    },
                    onSave: async () => {
                        this.setState({ resetTable: true }, async () => {
                            try {
                                // Prepare validation data
                                const validationData = {
                                    lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                    agreementId: newEntry.agreementId?.value || '',
                                    profileType: newEntry.agreementType?.value || '',
                                    legalEntityId: newEntry.legalEntityId?.value || '',
                                    legalEntity: newEntry.legalEntity?.value || ''
                                };
            
                                // Validate required fields before API call
                                if (!validationData.agreementId || !validationData.lineOfBusiness || !validationData.legalEntityId) {
                                    MessageBox.error('Validation Error', 'Please fill in all required fields before saving.', 500);
                                    this.setState({ resetTable: false });
                                    return;
                                }
            
                                // Show loading state
                                this.setState({ modal: { ...this.state.modal, disabled: true } });
            
                                // Call validation API
                                const validationResult = await API.validateMasterAgreement(validationData, this.props.appState?.lob?.toUpperCase() || 'XM');
            
                                // Hide loading state
                                this.setState({ modal: { ...this.state.modal, disabled: false } });
            
                                if (!validationResult.success) {
                                    MessageBox.error('Validation Failed', validationResult.reason || 'The master agreement data could not be validated. Please check your entries and try again.', 500);
                                    this.setState({ resetTable: false });
                                    return;
                                }
            
                                // Proceed with existing validation and save logic
                                let exists = false;
                                let formData = cloneObject(data);
                                
                                if (!formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
                                    this.initializeProfileData(formData);
                                }
            
                                const currentAgreements = formData.compositeProfile.legalAgreement.attributes.masterAgreements;
            
                                if (currentAgreements) {
                                    currentAgreements.forEach(item => {
                                        if (item.agreementId === newEntry.agreementId?.value) {
                                            exists = true;
                                            MessageBox.error('Validation Error', 'Agreement ID already exists. Please enter a unique Agreement ID.', 500);
                                        }
                                    });
                                }
            
                                if (!exists) {
                                    const newAgreement = {
                                        lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                        agreementId: newEntry.agreementId?.value || '', 
                                        profileType: newEntry.agreementType?.value || '',
                                        legalEntityId: newEntry.legalEntityId?.value || '',
                                        legalEntity: newEntry.legalEntity?.value || '',
                                        status: newEntry.status?.value || 'LIVE',
                                        createdAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                        updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                        createdBy: this.props.userInfo?.username || 'system'
                                    };
                                    
                                    formData.compositeProfile.legalAgreement.attributes.masterAgreements.push(newAgreement);
                                    
                                    this.toggleModal({ state: false });
                                    
                                    if (this.props.onCustFormUpdate) {
                                        this.props.onCustFormUpdate(formData);
                                    }
                                    
                                    if (this.gridApiRefs["masterAgreements"]) {
                                        this.gridApiRefs["masterAgreements"].setRowData(
                                            formData.compositeProfile.legalAgreement.attributes.masterAgreements
                                        );
                                    }
                                    
                                    MessageBox.alert('Success', 'Master agreement has been validated and added successfully.', 500);
                                    this.setState({ resetTable: false });
                                } else {
                                    this.setState({ resetTable: false });
                                }
            
                            } catch (error) {
                                console.error('Validation error:', error);
                                MessageBox.error('System Error', 'An unexpected error occurred during validation. Please try again.', 500);
                                this.setState({ 
                                    resetTable: false,
                                    modal: { ...this.state.modal, disabled: false }
                                });
                            }
                        });
                    }
                });
            },
            DELETE_SELECTED_MASTER_AGREEMENTS: () => {
                this.deleteSelectedRows();
            }
        };

        autoBind(this);

        this.buttons = this.state.permissions.readonly
            ? [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
            ]
            : [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
                {
                    title: "Save Draft",
                    onclick: this.props.onSave,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Submit",
                    onclick: this.handleSubmit,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Deactivate",
                    onclick: this.props.onDeactivate,
                    displayIf: this.isProfileActive.bind(this),
                },
                {
                    title: "Activate",
                    onclick: this.props.onActivate,
                    displayIf: this.isProfileInactive.bind(this),
                },
            ];
    }

    getPermission(props) {
        const profileReadOnly = props.data?.profileReadOnly || false;
        const userHasWriteAccess = isReadWrite(props.userInfo, "ROLE_AGENCY_UI_READ_WRITE");
        return profileReadOnly || !userHasWriteAccess;
    }

    isProfileNewOrActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return !profilePresent || status === "Live" || status === "New";
    }

    isProfileActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Live";
    }

    isProfileInactive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Inactive";
    }

    componentDidMount() {
        try {
            const config = fetchConfig(this.props.appState?.lob || "xm");
            this.setup(config);
        } catch (error) {
            const fallbackConfig = {
                layout: [
                    {
                        refKey: "agreement",
                        header: { title: "XM Profile Information" },
                        type: "form",
                        data: [],
                    },
                ],
                create: {
                    newMasterAgreements: {
                        data: [{ column: [] }]
                    }
                }
            };
            this.setup(fallbackConfig);
        }
    }

    componentDidUpdate(prevProps) {
        if (prevProps.data !== this.props.data && this.props.data) {
            if (this.gridApiRefs["masterAgreements"]) {
                const masterAgreements = this.props.data?.compositeProfile?.legalAgreement?.attributes?.masterAgreements || [];
                this.gridApiRefs["masterAgreements"].setRowData(masterAgreements);
            }
        }
    }

    setup = (config) => {
        let cloneData = cloneObject(this.props.data || {});
        this.initializeProfileData(cloneData);

        let configSetupVar = configSetup({
            config,
            formdata: cloneData,
            staticData: this.props.staticData,
            bindFunctions: this.bindedEvents,
        });

        this.setState({ config: configSetupVar });

        if (this.props.onCustFormUpdate) {
            this.props.onCustFormUpdate(cloneData);
        }
    };

    initializeProfileData = (data) => {
        if (!data.compositeProfile) {
            data.compositeProfile = {};
        }

        if (!data.compositeProfile.legalAgreement) {
            data.compositeProfile.legalAgreement = {
                profileId: "",
                profileType: "",
                version: 0,
                updatedBy: "",
                updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                attributes: {},
            };
        }

        if (!data.compositeProfile.legalAgreement.attributes) {
            data.compositeProfile.legalAgreement.attributes = {
                agreementType: "",
                spn: "",
                ecd: "",
                tier: "",
                tierVersion: "",
                tierEffectiveDate: "",
                addOn: '', //{ source: "USER", value: [] }, 
                houseMultiplier: "",
                status: "New",
            };
        }

        if (typeof data.compositeProfile.legalAgreement.version == "number") {
            data.compositeProfile.legalAgreement.version = data.compositeProfile.legalAgreement.version.toString();
        }

        if (!data.compositeProfile.legalAgreement.attributes.masterAgreements) {
            data.compositeProfile.legalAgreement.attributes.masterAgreements = [];
        }

        if (data.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value) {
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.eci) {
                data.compositeProfile.legalAgreement.attributes.eci = 
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.eci;
            }
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.spn) {
                data.compositeProfile.legalAgreement.attributes.spn = 
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.spn;
            }
            
            let legalAgreementProfiles = this.processLegalAgreementProfiles(data);
            data.compositeProfile.legalAgreement.attributes.masterAgreements = legalAgreementProfiles;
        }
    };

    onGridReady = ({ e, refKey }) => {
        const { api } = e;
        this.gridApiRefs[refKey] = api;
        
        api.sizeColumnsToFit();
        
        if (refKey === "masterAgreements") {
            api.addEventListener('selectionChanged', this.onSelectionChanged);
            api.addEventListener('cellValueChanged', this.onCellValueChanged);
        }
    };

    onSelectionChanged = () => {
        const selectedNodes = this.gridApiRefs["masterAgreements"]?.getSelectedNodes() || [];
        const selectedRows = selectedNodes.map(node => node.data);
        this.setState({ selectedRows });
    };

    onCellValueChanged = (event) => {
        const { data, colDef, newValue, node } = event;
        const field = colDef.field;
        
        data[field] = newValue;
        data.updatedAt = moment().format("YYYY-MM-DD HH:mm:ss.SSS");
        data.updatedBy = this.props.userInfo?.username || 'system';
        
        let formData = cloneObject(this.props.data || {});
        
        if (formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
            const rowIndex = node.rowIndex;
            formData.compositeProfile.legalAgreement.attributes.masterAgreements[rowIndex] = data;
            
            if (this.props.onCustFormUpdate) {
                this.props.onCustFormUpdate(formData);
            }
        }
    };

    deleteSelectedRows = () => {
        const { selectedRows } = this.state;
        
        if (selectedRows.length === 0) {
            MessageBox.info('No Selection', 'Please select one or more rows to delete.');
            return;
        }

        let formData = cloneObject(this.props.data || {});
        
        if (formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
            const currentAgreements = formData.compositeProfile.legalAgreement.attributes.masterAgreements;
            const updatedAgreements = currentAgreements.filter(agreement => 
                !selectedRows.some(selectedRow => 
                    JSON.stringify(agreement) === JSON.stringify(selectedRow)
                )
            );
            
            formData.compositeProfile.legalAgreement.attributes.masterAgreements = updatedAgreements;
            
            if (this.props.onCustFormUpdate) {
                this.props.onCustFormUpdate(formData);
            }
            
            if (this.gridApiRefs["masterAgreements"]) {
                this.gridApiRefs["masterAgreements"].setRowData(updatedAgreements);
            }
            
            this.setState({ selectedRows: [] });
        }
    };

    isFormValid = (props) => {
        mixinIsFormValid({ ...props, _this: this });
    };

    toggleModal = (props) => {
        mixinToggleModal({ ...props, _this: this });
    };

    checkGlobalConditions = (renderIf = null) => {
        return mixinCheckGlobalConditions({ renderIf, _this: this });
    };

    handleSubmit = () => {
        if (this.props.onSubmit) {
            this.props.onSubmit();
        }
    };

    getCurrentFormData = () => {
        return this.props.data || {};
    };

    render() {
        const {
            buttons,
            bindedEvents,
            checkGlobalConditions,
            toggleModal,
            onGridReady,
            isFormValid,
        } = this;

        const { ready, modal, config, permissions, selectedRows } = this.state;
        const { onFormUpdate, onCustFormUpdate, staticData } = this.props;

        let formData = this.props.data || {};

        return (
            <div style={{ marginTop: "10px", marginBottom: "10px" }}>
                {!!config && ready ? (
                    <>
                        {/* Loop through JSON config layout */}
                        {config.layout.map((x, i) => {
                            const {
                                refKey,
                                header,
                                type,
                                data,
                                columnDefs,
                                renderIf,
                                bind,
                                rowClassRules,
                            } = x;

                            return checkGlobalConditions(renderIf) ? (
                                <div
                                    className="dt-container"
                                    key={i}
                                >
                                    {!!header ? (
                                        <div>
                                            <Header
                                                {...header}
                                                bindedEvents={bindedEvents}
                                                permissions={permissions}
                                            />
                                        </div>
                                    ) : null}

                                    {!!type && type === "form" ? (
                                        <FormBuilder
                                            data={data}
                                            onFormUpdate={(updatedData) => {
                                                if (onFormUpdate) {
                                                    onFormUpdate(updatedData);
                                                }
                                                if (this.props.onCustFormUpdate) {
                                                    this.props.onCustFormUpdate(updatedData);
                                                }
                                            }}
                                            bindedEvents={bindedEvents}
                                            permissions={permissions}
                                            staticData={staticData}
                                        />
                                    ) : null}

                                    {!!type && type === "addOn" ? (
                                        <AddOnProduct
                                            bind={bind}
                                            formData={formData}
                                            onCustFormUpdate={onCustFormUpdate}
                                            bindedEvents={bindedEvents}
                                            config={this.state.config}
                                            refKey={refKey}/>
                                    ) : null}

                                    {!!type && type === "datatable" ? (
                                        <DataGrid
                                            suppressRowClickSelection={false}
                                            rowSelection="multiple"
                                            rowMultiSelectWithClick={true}
                                            headerCheckboxSelection={true}
                                            headerCheckboxSelectionFilteredOnly={true}
                                            containerProps={{
                                                style: { height: "200px" },
                                            }}
                                            rowStripes
                                            columnDefs={columnDefs?.map(col => {
                                                if (col.field === "lineOfBusiness") {
                                                    return {
                                                        ...col,
                                                        checkboxSelection: true,
                                                        headerCheckboxSelection: true,
                                                        editable: !permissions.readonly,
                                                        width: 200
                                                    };
                                                }
                                                return {
                                                    ...col,
                                                    editable: !permissions.readonly
                                                };
                                            })}
                                            rowData={formData?.compositeProfile?.legalAgreement?.attributes?.masterAgreements || []}
                                            onGridReady={(e) => {
                                                onGridReady({ e, refKey });
                                            }}
                                            refKey={refKey}
                                        />
                                    ) : null}
                                </div>
                            ) : null;
                        })}

                        <Dialog
                            onEntered={() => {}}
                            open={modal.show}
                            onClick={() => {}}
                            onClose={() => { toggleModal(false) }}
                        >
                            <div>
                                {!!modal.show ? (
                                    <DialogContent>
                                        <div className='dt-container'>
                                            <Header {...modal.header} permissions={permissions} />
                                            <FormBuilder 
                                                data={this.state.modal.formdata?.data || []} 
                                                onFormUpdate={modal.onUpdate} 
                                                isFormValid={isFormValid}
                                                selectedRowIdx={selectedRowIdx}
                                                gridApi={this.gridApiRefs}
                                                resetFormFields={this.state.resetFormFields}
                                                permissions={permissions}
                                                staticData={staticData}
                                            />
                                        </div>
                                    </DialogContent>
                                ) : null}

                                <DialogActions>
                                    {!permissions.readonly ? (
                                        <Button variant={'cta'} disabled={modal.disabled} onClick={modal.onSave}>
                                            Save
                                        </Button>
                                    ) : null}
                                    <Button variant={'cta'} onClick={() => { toggleModal(false) }}>
                                        Close
                                    </Button>
                                </DialogActions>
                            </div>
                        </Dialog>

                        <Buttons data={buttons} />
                    </>
                ) : (
                    <div style={{ padding: "20px", textAlign: "center" }}>
                        <Spinner />
                        <p>Loading XM Profile configuration...</p>
                    </div>
                )}
            </div>
        );
    }

    processLegalAgreementProfiles = (data) => {
        let legalAgreementProfiles = [];
        const crossMarginStats = data?.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value;

        if (Array.isArray(crossMarginStats) && crossMarginStats.length > 0) {
            crossMarginStats.forEach((statItem) => {
                const legalEntities = statItem?.legalEntities;
                if (Array.isArray(legalEntities) && legalEntities.length > 0) {
                    legalEntities.forEach((entity) => {
                        const profilesObj = entity?.legalAgreementProfiles;
                        if (profilesObj && typeof profilesObj === 'object') {
                            Object.keys(profilesObj).forEach(agreementType => {
                                const profiles = profilesObj[agreementType];
                                if (Array.isArray(profiles)) {
                                    profiles.forEach((profile, index) => {
                                        legalAgreementProfiles.push({
                                            agreementId: profile.profileId,
                                            lineOfBusiness: profile.lineOfBusiness,
                                            agreementCategory: agreementType,
                                            profileType: profile.profileType,
                                            legalEntityName: profile.lineOfBusiness,
                                            status: profile.profileStatus,
                                            updatedBy: profile.updatedBy,
                                            updatedAt: profile.updatedAt,
                                            createdBy: profile.createdBy,
                                            version: profile.version,
                                            _originalData: profile,
                                            _agreementType: agreementType
                                        });
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }

        return legalAgreementProfiles;
    };
}

const mapStateToProps = (state) => {
    const { appState } = state;
    return { appState };
};

const mapDispatchToProps = (dispatch) => {
    return {
        appStateAction: bindActionCreators(appStateAction, dispatch),  
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(XMProfileFields); 

abcd123

{
    "layout": [
        {
            "refKey": "agreement",
            "header": {
                "title": "Agreement",
                "showSubTitle": true
            },
            "type": "form",
            "data": [
                {
                    "column": [
                        {
                            "title": "Profile ID",
                            "bind": "compositeProfile.legalAgreement.profileId",
                            "type": "input",
                            "readonly": true,
                            "markSource": false
                        },
                        {
                            "title": "Agreement No",
                            "bind": "compositeProfile.legalAgreement.profileId",
                            "type": "input",
                            "required": true,
                            "markSource": false
                        },
                        {
                            "title": "Agreement Type",
                            "bind": "compositeProfile.legalAgreement.profileType",
                            "type": "input",
                            "readonly":true
                        },
                        {
                            "title": "Updated By",
                            "bind": "compositeProfile.legalAgreement.updatedBy",
                            "type": "input",
                            "readonly": true
                        }
                    ]
                },
                {
                    "column": [
                        {
                            "title": "SPN",
                            "bind": "compositeProfile.legalAgreement.attributes.spn",
                            "type": "input",
                            "required": true
                        },
                        {
                            "title": "Status",
                            "bind": "compositeProfile.legalAgreement.profileStatus",
                            "type": "dropdown",
                            "required": true,
                            "options": [
                                "LIVE",
                                "DRAFT_UPDATE"
                            ],
                            "placeholder": "Select Status"
                        },
                        {
                            "title": "Version",
                            "bind": "compositeProfile.legalAgreement.version",
                            "type": "input",
                            "readonly": true
                        },
                        {
                            "title": "Updated At",
                            "bind": "compositeProfile.legalAgreement.updatedDtm",
                            "readonly": true,
                            "type": "datepicker"
                        },
                        {
                            "title": "ECID",
                            "bind": "compositeProfile.legalAgreement.attributes.eci",
                            "type": "input",
                            "required": true
                        }
                    ]
                }
            ]
        },
        {
            "refKey": "crossMarginEntities",
            "header": {
                "title": "Cross Product Margin Calc",
                "showSubTitle": true
            },
            "type": "form",
            "data": [
                {
                    "column": [
                        {
                            "title": "Tier",
                            "bind": "compositeProfile.legalAgreement.attributes.tier",
                            "type": "number",
                            "readonly": false,
                            "markSource": false
                        },
                        {
                            "title": "House Multiplier",
                            "bind": "compositeProfile.legalAgreement.attributes.houseMultiplier",
                            "type": "input",
                            "inputType": "number", "min": 0, "max": 100
                        }
                    ]
                },
                {
                    "column": [
                        {
                            "title": "Tier Version",
                            "bind": "compositeProfile.legalAgreement.attributes.tierVersion",
                            "type": "input",
                            "required": true, "inputType": "number", "min": 1, "max": 9
                        },
                        {
                            "title": "Tier Effective Date",
                            "bind": "compositeProfile.legalAgreement.attributes.tierEffectiveDate",
                            "type": "datepicker",
                            "required": true
                        }
                    ]
                }
            ]
        },
        {
            "refKey": "addOnOptions",
            "bind": "compositeProfile.legalAgreement.attributes.addOn",
            "type": "addOn",
            "header": {
                "title": "Add On"
            }
        },
        {
            "refKey": "masterAgreements",
            "createKey": "newMasterAgreements",
            "header": {
                "title": "In Scope Master Agreements",
                "buttons": [
                    {
                        "title": "Add",
                        "events": {
                            "onClick": "CREATE_NEW_MASTER_AGREEMENT"
                        }
                    },
                    {
                        "title": "Delete",
                        "events": {
                            "onClick": "DELETE_SELECTED_MASTER_AGREEMENTS"
                        }
                    }
                ]
            },
            "type": "datatable",
            "bind": "compositeProfile.legalAgreement.attributes.masterAgreements",
            "columnDefs": [
                {
                    "field": "lineOfBusiness",
                    "headerName": "Line Of Business",
                    "checkboxSelection": true,
                    "headerCheckboxSelection": true,
                    "width": 200
                },
                {
                    "field": "agreementId",
                    "headerName": "Agreement ID",
                    "width": 150
                },
                {
                    "field": "profileType",
                    "headerName": "Agreement Type",
                    "width": 150
                },
                {
                    "field": "legalEntityId",
                    "headerName": "Legal Entity ID",
                    "width": 150
                },
                {
                    "field": "legalEntity",
                    "headerName": "Legal Entity",
                    "width": 200
                }
            ]
        }
    ],
    "create": {
        "newMasterAgreements": {
            "data": [
                {
                    "column": [
                        {
                            "title": "Line Of Business",
                            "bind": "lineOfBusiness",
                            "type": "dropdown",
                            "options": [
                                "FI",
                                "PD",
                                "PR"
                            ],
                            "required": true,
                            "placeholder": "Enter Line of Business",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Agreement ID",
                            "bind": "agreementId",
                            "type": "input",
                            "required": true,
                            "placeholder": "Enter Agreement ID",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Agreement Type",
                            "bind": "agreementType",
                            "type": "dropdown",
                            "options": [
                                "IPBA",
                                "IAA",
                                "CLEARING",
                                "GMRA",
                                "ISDA"
                            ],
                            "required": true,
                            "placeholder": "Enter Agreement Type",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Legal Entity ID",
                            "bind": "legalEntityId",
                            "type": "input",
                            "required": true,
                            "placeholder": "Enter Legal Entity ID",
                            "validation": {
                                "required": true,
                                "maxLength": 50
                            }
                        },
                        {
                            "title": "Legal Entity",
                            "bind": "legalEntity",
                            "type": "input",
                            "required": true,
                            "placeholder": "Enter Legal Entity Name",
                            "validation": {
                                "required": true,
                                "maxLength": 100
                            }
                        }
                    ]
                }
            ]
        }
    }
}

abcd123

{
    "layout": [
        {
            "refKey": "crossMarginEntitiesRules",
            "header": {
                "title": "In Scope Master Agreements",
                "buttons": [
                    {
                        "title": "Add",
                        "events": {
                            "onClick": "CREATE_NEW_MASTER_AGREEMENT"
                        }
                    }
                ]
            },
            "type": "datatable",
            "bind": "compositeProfile.legalAgreement.attributes.crossMarginEntitiesRules",
            "columnDefs": [
                {
                    "field": "lineOfBusiness",
                    "headerName": "Line Of Business"
                },
                {
                    "field": "ruleId",
                    "headerName": "Rule ID "
                },
                {
                    "field": "ruleDescription",
                    "headerName": "Rule Description"
                },
                {
                    "field": "ruleConditions",
                    "headerName": "Rule Condition",
                    "autoHeight": true,
                    "cellRenderer": "renderRuleCondition"
                },
                {
                    "field": "isEnabled",
                    "headerName": "Enabled"
                },
                {
                    "headerName": "Action",
                    "cellRenderer": "removeItem"
                }
            ]
        }
    ],
    "create": {
        "crossMarginRuleConfiguration": {
            "data": [{
                "column": [
                    { "title": "Line Of Business", "bind": "lineOfBusiness", "type": "dropdown", "required": true ,"optionRefKey": "LINE_OF_BUSINESS"},
                    { "title": "Rule Id", "bind": "ruleId", "type": "input", "required": true },
                    { "title": "Description", "bind": "ruleDescription", "type": "input", "required": true }
                ]
            },{
                "column": [
                    { "title": "Action", "bind": "action", "type": "dropdown", "required": true, "optionPreset": "ACTION" },
                    { "title": "Enabled", "bind": "isEnabled", "type": "dropdown", "required": true, "optionPreset": "YES_NO" }
                ]
            }]
        }
    }
}

abcd123

// import moment from "moment";
import React, { Component } from "react";
// import autoBind from "react-autobind";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { Button, Dialog, DialogActions, DialogContent, Spinner} from '@jpmuitk/components';
import { DataGrid } from "@jpmuitk/data-grid";
import { fetchConfig } from './config';
import * as appStateAction from '../../../../../../actions/appStateAction';
import { isReadWrite } from "../../../../../../javascript/entitlementUtils";
import { configSetup, newFormBind, formBind } from "../../../../../../javascript/config";
import { mixinCheckGlobalConditions, mixinIsFormValid, mixinToggleModal } from "../../../../../../javascript/mixins";
import { traverseFormToBindValue } from "../../../../../../javascript/utility";
import Header from "../../../../../Common/Header/Header";
import FormBuilder from "../../../../../Common/FormBuilder";
import { LINE_OF_BUSINESS } from "../../../../../Common/constants";
import api from "../../../api";
//import api from "../../../api";

class XMMarginEntity extends Component {
    constructor(props) {
        super(props);

        this.state = {
            permissions: this.getPermission(props),
            config: null,
            toggleState: true,
            resetTable: false,
            ready: true,
            gridApi: {},
            marginEntityRowData: {},
            modal: {
                disabled: null,
                show: false,
                header: {},
                formdata: {},
                onUpdate: () => {},
                onSave: () => {},
                onClose: () => {}
            },
            resetFormFields: {
                resetIfSelected: [{ field: "frequency", value: "*" }],
                resetExclude: ["frequency"],
            },
            crossMarginRuleConfiguration: {
                show: false,
                fetching: true,
                fullscreen: false,
                onOpen: () => {},
                onClose: () => {},
                onUpdate: () => {},
                onSave: () => {}
            }
        };

        /** Need to WORK ON STATIC VALUE **/
        this.stat = {"LINE_OF_BUSINESS": [{"code": "all","displayName": "ALL"},
                {"code": "dcm","displayName": "DCM"},
                {"code": "repo","displayName": "REPO"},
                {"code": "pfs","displayName": "PFS"},
                {"code": "firepo","displayName": "FI_REPO"},
                {"code": "principal_derivative","displayName": "PRINCIPAL_DERIVATIVE"},
                {"code": "tba","displayName": "TBA"},
                {"code": "client_valuation","displayName": "CLIENT_VALUATION"},
                {"code": "clearing","displayName": "CLEARING"},
                {"code": "xm","displayName": "XMARGIN"}]};

        this.bindedEvents = {
            CREATE_NEW_MASTER_AGREEMENT: () => {
                const formData = this.state.config.create.crossMarginRuleConfiguration;
                this.handleOnToggleInfo('Rule Configuration', formData, this.stat, ()=>{alert('--ddd-')}, ()=> {alert('--CCC---')});
            },
            CREATE_NEW_RULE_CONDITIONS: () => {
                alert(`---INFO VALUE--`);
            }
        };

        this.buttons = [{title: "Back", onclick: this.props.onCancel },
            { title: "Cancel", onclick: this.props.onCancel },
            { title: "Save Draft", onclick: this.props.onSave },
            { title: "Submit", onclick: this.props.onSubmit }];
    }

    handleOnToggleInfo = (title, fD, stat, onCancelCallback, onSaveCallback, lsVal= null, rowIndex= null) => {
        this.toggleModal({
            state: true,
            header: {title},
            showMultiComp: true,
            rowIndex,
            listData: lsVal!== null ? lsVal : [],
            formdata: newFormBind({
                formdata: fD,
                staticData: stat
            })
        });
    };

    getPermission(props) {
        const profileReadOnly =  props.data?.profileReadOnly || false;
        const userHasWriteAccess = isReadWrite(
            props.userInfo,
            "ROLE_AGENCY_UI_READ_WRITE"
        );
        return profileReadOnly || !userHasWriteAccess;
    }

    componentDidMount() {
        const config = fetchConfig(this.props.appState?.lob || "XM");
        this.setup(config);
    };

    handleOnMarginEntityDataFormat = (formData= {}) => {
      return  traverseFormToBindValue({formData,bind: 'compositeProfile.legalAgreement.attributes.crossMarginEntitiesRules'})?.flatMap((item ) => {
          return item?.entityRules.map(rule => ({
              lineOfBusiness: item.lineOfBusiness,
              ruleId: rule.ruleId,
              ruleDescription: rule.ruleDescription,
              ruleConditions: "<span>Asset Code = Government Bond<span style='font-style:italic; color:gray'> and</span><br/>" +
                  "Asset Currency = KRW<span style='font-style:italic; color:gray'> and</span><br/>" +
                  "Asset Country = Republic of Korea</span>",
              action: rule.rule,
              isEnabled: rule.isEnabled
          }));
      });
    };

    setup = async (config) => {
        const {success, payload, status} = await api.fetchRuleAttributeParameters();
        const ruleAttribute = success ? payload :  [{"Key": "instrument.nsi", "Name": "Non-Securitized Instrument Id",  "Type": "freetext", "lob": "DCM", "Valid Values": [], "Weight": 0,"Value Aliases": {}},
            {"Key": "instrument.assetSubType", "Name": "Asset Code",  "Type": "enumeration","lob": "FT_REPO", "Valid Values": [ "MG", "SN", "MN",  "AA" ],"Value Aliases": { "MG": "Section 47 Bonds", "SN": "Section 50 Bonds", "MN": "ABS Car Loan", "AA": "ABS Credit Card Receivable"}}
        ]
        this.setState({ config: configSetup({
                config,
                formdata: this.props.data || {},
                staticData: this.props.staticData,
                bindFunctions: this.bindedEvents,
            }),
            marginEntityRowData: this.handleOnMarginEntityDataFormat(this.props?.data),
            ruleAttribute: ruleAttribute
        });
    };

    toggleModal = (props) => {
        mixinToggleModal({...props, _this: this})
    };

    checkGlobalConditions = (renderIf = null) => {
        return mixinCheckGlobalConditions({ renderIf, _this: this });
    };

    removeItem = (compInfo, params) => {
        compInfo.item = params;
        if(!this.state.permissions.readonly){
            return <div style={{cursor:"pointer", marginLeft : "20px"}}>
                <button className="dt-btn" onClick={ () => {alert('--')}}>Remove</button>
            </div>
        }
        return "";
    };

    renderRuleCondition = (compInfo, params) => <span dangerouslySetInnerHTML={{__html: params.value}}/>

    handleOnCellClicked = (e, createKey =null, refKey) =>{
        const {colDef, rowIndex} = e;
        const { state } =  this;
        const { cellRenderer } = colDef;
        const marginEntityRowDataVal = state.marginEntityRowData;
        const formData = formBind({
            formdata: state.config.create.crossMarginRuleConfiguration,
            data: marginEntityRowDataVal[rowIndex],
            staticData: this.stat //Need to check in /*this.props.staticData*/
        });
        if(cellRenderer === 'removeItem')
            return;

         this.handleOnToggleInfo('Edit Rule Configuration',
             formData, this.stat, ()=>{alert('--onCancel-')},
             ()=> {alert('--onSAVE---')}, marginEntityRowDataVal[rowIndex], rowIndex);
    };

    isFormValid = (props) => {
        mixinIsFormValid({...props, _this: this})
    };

    getDisplayName = (item) =>{
        return (item && (typeof item ==='object')) ? item.displayName : item;
    };

    renderOnDialog = () => {
       const { bindedEvents, isFormValid, getDisplayName, toggleModal } = this;
       const { modal, permissions, config } = this.state;
       const ruleConfigHeader ={"header": {
           "title": "Rule Conditions",
           "buttons": [
               {
                   "title": "Add",
                   "events": {
                       "onClick": "CREATE_NEW_RULE_CONDITIONS"
                   }
               }
           ]
       }
       };
       const stat = {"YES_NO_BLANK": [{"code": "X","displayName": ""},{"code": "YES","displayName": "YES"},{"code": "NO","displayName": "NO"}]};
       return <Dialog
            PaperProps={{
                style: {
                    width: !!modal.showMultiComp ? '1500px' :'auto'
                }
            }}
            fullWidth={true}
            onEntered={(() => {})}
            open={modal.show}
            onClick={() => {}}
            onClose={() => {}}>
           <DialogContent>
               <div className={'dt-container'}>
                   <Header {...modal.header} permissions={permissions}/>
                   <FormBuilder data={modal?.formdata?.data} bindedEvents={bindedEvents} onFormUpdate={modal.onUpdate} isFormValid={isFormValid} permissions={permissions} getDisplayName={getDisplayName} staticData={stat}/>
                   <div style={{height: 'calc(100% - 30px)'}}>
                       <Header {...ruleConfigHeader.header} bindedEvents={bindedEvents} permissions={permissions}/>

                   </div>
               </div>
               <DialogActions>
                   <Button variant={'cta'} onClick={() => {toggleModal(false)}}>Close</Button>
               </DialogActions>
           </DialogContent>
        </Dialog>
    };

    render() {
       const { handleOnCellClicked, bindedEvents } = this;
       // modal,
       const { config, ready,  marginEntityRowData } = this.state;
       return (
            <div style={{ marginTop: "10px", marginBottom: "10px" }}>
                {!!config && ready ? (
                    <>
                    {config.layout.map((x, i) => {
                       const { refKey, createKey, header, type, columnDefs, bind, rowClassRules} = x;
                            return <div key={i}>
                                {!!header ? (
                                    <Header
                                        {...header}
                                        bindedEvents={bindedEvents}
                                        permissions
                                    />
                                ) : null}

                                {!!type && type === "datatable" ? (
                                    <DataGrid
                                        suppressRowClickSelection={true}
                                        rowStripes
                                        columnDefs={columnDefs}
                                        rowClassRules={rowClassRules}
                                        rowData={marginEntityRowData}
                                        onGridReady={(event) => {
                                            return event.api.sizeColumnsToFit()
                                        }} //Need info value
                                        onCellClicked={e => {handleOnCellClicked(e, createKey, refKey)}}
                                        refKey={refKey}
                                        frameworkComponents={{removeItem: this.removeItem.bind(this, {refKey, bind}),
                                            renderRuleCondition: this.renderRuleCondition.bind(this, {refKey, bind})}}
                                    />
                               ): null}
                            <div style={{left: "0", width: "100%",marginTop: "25px", marginBottom: "25px", height: "1px",  background: "#84878E"}}/>
                            <Button>Preview/Refresh</Button>
                        </div>
                        })}
                    </>
                ): (
                    <div style={{ padding: "20px", textAlign: "center" }}>
                        <Spinner />
                        <p>Loading XM Profile configuration...</p>
                    </div>
                )
                }
                {this.renderOnDialog()}

            </div>
        );
    }
}

const mapStateToProps = (state) => {
    const { appState } = state;
    return { appState };
};

const mapDispatchToProps = (dispatch) => {
    return {
        appStateAction: bindActionCreators(appStateAction, dispatch),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(XMMarginEntity);


