import React, {Component, Fragment} from 'react';
import {bindActionCreators} from 'redux';
import {Debouncer, isStringNotNull} from '../../../javascript/utility';
import {connect} from 'react-redux';
import {Dropdown} from '@jpmuitk/dropdown';
import {DatePicker} from '@jpmuitk/date-picker';
import {ComboBox} from '@jpmuitk/combo-box';
import {Button, Checkbox, MultiSelectDropdown, Pill} from '@jpmuitk/components';
import {Icon} from '@jpmuitk/icon';
import * as appStateAction from '../../../actions/appStateAction';
import autoBind from 'react-autobind';
import moment from 'moment';
import './style.scss';
import PasswordComponent from "../PasswordComponent";
import {MessageBox} from "../messagebox";
import DropdownComponent from "../DropdownComponent";
import { isInclusivelyAfterDay } from 'react-dates';
import _ from 'lodash';

const debounce = new Debouncer();

class FormBuilder extends Component {
    constructor(props) {
        super(props);

        this.state = {
            ready: true,
            formdata: this.props.data,
            filteredData: this.props.filteredData,
            rowIndex: this.props.rowIndex
        };

        autoBind(this)
    }

    componentDidMount() {
        let promises = [];

        this.state.formdata.forEach(({column}, index) => {
            column.forEach((f, i) => {
                let value = !!f.value ? f.value : null;
                if (!!value) {
                    promises.push(new Promise(async () => {
                        await this.updateValue(index, i, value, null,true);
                        this.setState({ready: true})
                    }))
                }
            })
        })
    }

    multiCheck(containerIndex, formIndex, value) {
        const {formdata} = this.state;
        const {altered, optionAll} = formdata[containerIndex].column[formIndex];
        if (!altered) {
            formdata[containerIndex].column[formIndex].altered = true;
            formdata[containerIndex].column[formIndex].value = [];
        }
        if(optionAll){
                if(value && value.length > 1){
                    if((typeof value[0] === 'object')){
                        if(value[0].code ==="" || value[0].code ==="ALL"){
                            value.splice(0, 1);
                        }else {
                            let filteredEmptyValue = value.filter(valueItem => valueItem.code === ""),
                                filteredAllValue = value.filter(valueItem => valueItem.code === "ALL");
                            if(filteredEmptyValue.length > 0){
                                value = filteredEmptyValue;
                            }else if(filteredAllValue.length > 0){
                                value = filteredAllValue;
                            }
                        }
                    }else{
                        if(value[0] ==="" || value[0] ==="ALL"){
                            value.splice(0, 1);
                        }else {
                            let filteredEmptyValue = value.filter(valueItem => valueItem === ""),
                                filteredAllValue = value.filter(valueItem => valueItem === "ALL");
                            if(filteredEmptyValue.length > 0){
                                value = filteredEmptyValue;
                            }else if(filteredAllValue.length > 0){
                                value = filteredAllValue;
                            }
                        }
                    }

                }
        }
        formdata[containerIndex].column[formIndex].value = value;
        return formdata[containerIndex].column[formIndex].value;
    }

    getReadOnly(containerIndex, prop, showAttribute) {
        const {formdata} = this.state,
            {value=null, defaultValue, altered} = formdata[containerIndex].column.find(x => x.bind === prop);
        let d_str ,v_str;
        if(Array.isArray(defaultValue)){
                let valueArr =[];
                for (let key in defaultValue) {
                    let obj = defaultValue[key];
                    if(typeof obj === 'object'){
                        if(obj.hasOwnProperty(showAttribute)){
                            valueArr.push(obj[showAttribute]);
                        }
                    }else {
                        valueArr.push(obj);
                    }
                }
                d_str = valueArr.sort().join(', ');
        }else {
            d_str = defaultValue;
        }
        if(Array.isArray(value)){
                let valueArr =[];
                for (let key in value) {
                    let obj = value[key];
                    if(typeof obj === 'object'){
                        if(obj.hasOwnProperty(showAttribute)){
                            valueArr.push(obj[showAttribute]);
                        }
                    }else {
                        valueArr.push(obj);
                    }
                }
                v_str = valueArr.sort().join(', ');
        }else {
            v_str = value;
        }
        return altered ? v_str : d_str;
    }

    conditionalChecks(formdata, conditionals) {
        let valid = true;
        conditionals.forEach(c => {
            const {prop, operator, value} = c;

            function getOrDefault(form) {
                if(!!form.value) {
                    return form.value;
                } else if (!!form.defaultValue) {
                    return form.defaultValue;
                } else if (!!form.optionDefault) {
                    return form.optionDefault;
                } else {
                    return '';
                }
            }

            formdata.map(x => {
                const {column} = x;
                column.forEach(form => {
                    if (form.bind === prop && valid) {
                        const formVal = getOrDefault(form);
                        switch (operator.toUpperCase()) {
                            case 'EQUALS':
                                valid = formVal === value;
                                break;
                            case 'NOTEQUALS':
                                valid = formVal !== value;
                                break;
                            case 'INCLUDES':
                                valid = formVal.includes(value);
                                break;
                            case 'CONTAINS':
                                valid = value.indexOf(formVal) !== -1;
                                break;
                        }
                    }
                })
            })
        });
        return valid
    }

    updateAppState({key, value}) {
        const {appState} = this.props;
        let renderConditions = JSON.parse(JSON.stringify(appState.renderConditions));
        renderConditions[key] = value;
        this.props.appStateAction.update(appState, {renderConditions});
    }

    handleBlur(onBlurFunction, value, containerIndex, formIndex, inputType, max, min, title) {
        //Invoke custom onBlur callback function (if configured in schema)
        value = inputType === 'number' ? Number(value):value;
        const {bindedEvents = {}} = this.props;
        if (!!bindedEvents[onBlurFunction]) {
            bindedEvents[onBlurFunction](value, this.props.rowIndex, containerIndex, formIndex, this.updateValue, title);
        }
    }

    updateValue(containerIndex, formIndex, value, onChange = null, init = false, optionsConf = null ) {
        return new Promise(resolve => {
            const { executeConditionalsOnForm} = this;
            const {
                onFormUpdate = () => {
                }, isFormValid = () => {
                }, bindedEvents = {}
            } = this.props;
            const {formdata} = this.state;
            const {gridApi, resetFormFields = null} = this.props;
            const {type, regex = '.*', required = false, min = null, max = null, inputType = null, readonly = null, bind = null, title = null, defaultValue = null, showAttribute = null, valueType = null} = formdata[containerIndex].column[formIndex];
            const newFormData = [];
            let updateFormData = false,
            codeValue;

            /////////////////////////////////////////////////////
            // set regex
            const re = new RegExp(regex);
            if (type === 'dropdown') {
                if((typeof value ==='object') && value && isStringNotNull(value.code)){
                    codeValue = value;
                    value = value.code;
                }
            }
            if (type === 'multiselectdropdown') {
                let selectedType = value && value.length > 0 ? value[0] : null;
                if(optionsConf && optionsConf.options.length >0){
                    formdata[containerIndex].column[formIndex].options = optionsConf.options;
                }
                if((typeof selectedType ==='object') && selectedType && isStringNotNull(selectedType.code)){
                    let selectedValues  = [];
                    for (let i = 0; i < value.length; i++) {
                        if(valueType === 'object'){
                            selectedValues.push(value[i]);
                        }else{
                            selectedValues.push(value[i].code);
                        }
                    }
                    codeValue = value;
                    value = selectedValues;
                }
            }
            // check required
            let isValid;
            if (type !== 'multiselectdropdown') {
                if(type !== 'password' && !(value === defaultValue) && max && value && value.length > max){
                    value = defaultValue;
                    MessageBox.alert(title + " Validation",title + " should be less than "+ max);
                    return;
                }

                if (required === true) {
                    isValid = (!value || value.length) === 0 ? false : re.test(value);
                } else {
                    isValid = re.test(value);
                }
                // check min/max (if applicable)
                if (!!min) {
                    isValid = !!value ? value.length >= min : false;
                }
                if (!!max && isValid) {
                    isValid = !!value ? value.length <= max : false;
                }
                // check if password confirm
                if (inputType === 'confirmpassword') {
                    let item = formdata[containerIndex].column.find(x => x.type === 'password') || null;
                    isValid = !!item ? (item.value === value && item.isValid) : false;
                }
            }
            // if multiselect, do a specific check
            else {
                isValid = required ? (!!value && value.length > 0) || false : true;
            }
            /////////////////////////////////////////////////////

            //resetFormFields if passed in as prop will reset form fields that are defined in the object
            if (resetFormFields) {
                const resetFormFieldIdx = resetFormFields.resetIfSelected.findIndex(item => item.field === bind);
                if (resetFormFieldIdx !== -1 && (resetFormFields.resetIfSelected[resetFormFieldIdx].value === "*" || resetFormFields.resetIfSelected[resetFormFieldIdx].value === value)) {
                    formdata[containerIndex].column.forEach(item => {
                        const newItem = item;
                        if (item.bind && !resetFormFields.resetExclude.includes(item.bind)) { //exclude fields that should not be reset
                            newItem.altered = false;
                            newItem.value = null;
                        }
                        newFormData.push(newItem);
                    });
                    updateFormData = true;
                }
            }

            // set value
            formdata[containerIndex].column[formIndex].isValid = isValid;

            let valueToSet = null;
            if(inputType === 'number') {
                valueToSet = value = !!value && value !=="" ? Number(value) : Number("0");
            } else {
                valueToSet = value;
            }

            if (value !== undefined && (value === "" || (value && (value.findIndex !== undefined) && value.findIndex(item => item === "") !== -1))) {
                if(type === 'dropdownComponent' || type === 'dropdown'){
                    formdata[containerIndex].column[formIndex].value = codeValue ? (Array.isArray(codeValue)? (codeValue.length > 0 ? [codeValue[0].code]: null ) : codeValue.code) : valueToSet;
                }else{
                    formdata[containerIndex].column[formIndex].value = codeValue ? (Array.isArray(codeValue)? (codeValue.length > 0 ? [codeValue[0].code]: null ) : codeValue.code) : null;
                }

               // formdata[containerIndex].column[formIndex].defaultValue = null;
                // skip altered check on init
                if (!!init) {
                    formdata[containerIndex].column[formIndex].altered = false;
                }else{
                    formdata[containerIndex].column[formIndex].altered = true;
                }
            } else {
                formdata[containerIndex].column[formIndex].value = valueToSet;
                if(!!formdata[containerIndex].column[formIndex].readonly) {
                    formdata[containerIndex].column[formIndex].defaultValue = valueToSet;
                }
                // skip altered check on init
                if (!init) {
                    formdata[containerIndex].column[formIndex].altered = true;
                }
            }

            // set state after small debounce
            debounce.add(null, () => {
                // conditional checks
                executeConditionalsOnForm(formdata);

                // run this through props (if applicable)
                this.setState({
                    formdata: updateFormData ? [{column: newFormData}] : formdata
                }, () => {

                    // return formdata
                    onFormUpdate(this.state.formdata);

                    //Invoke custom onChange callback function (if configured in schema)
                    if (!!bindedEvents[onChange]) {
                        bindedEvents[onChange](value, this.props.rowIndex,containerIndex, formIndex, this.updateValue,this.props.filterFunction, bind)
                    }
                });

                // // return if it is valid or not
                let valid = true;
                formdata.forEach(x => {
                    x.column.forEach(form => {
                        const {isValid, required = false, readonly = false} = form;
                        valid = valid ? (required ? (isValid || readonly) : true) : false
                    })
                });
                isFormValid({valid});

                resolve()
            }, 1)
        })
    }

    executeConditionalsOnForm(formdata) {
        const {conditionalChecks, updateAppState} = this;

        formdata.map(x => {
            const {column} = x;
            column.map(form => {
                const {conditional = null, global_set = null} = form;

                //-----------------------------------------------------  CHECK GLOBAL CONDITIONALS
                if (!!global_set && global_set.length > 0) {
                    global_set.forEach(set => {
                        const {_if = null, _then = null, _else = null} = set;
                        if (conditionalChecks(formdata, _if)) {
                            if (!!_then) {
                                _then.forEach(c => {
                                    for (let [key, value] of Object.entries(c)) {
                                        updateAppState({key, value})
                                    }
                                })
                            }
                        } else {
                            if (!!_else) {
                                _else.forEach(c => {
                                    for (let [key, value] of Object.entries(c)) {
                                        updateAppState({key, value})
                                    }
                                })
                            }
                        }
                    })
                }

                //-----------------------------------------------------  CHECK CONDITIONALS
                if (!!conditional && !!conditional.length > 0) {
                    conditional.forEach(set => {
                        const {_if = null, _then = null, _else = null} = set;
                        if (conditionalChecks(formdata, _if)) {
                            if (!!_then) {
                                _then.forEach(c => {
                                    for (let [key, value] of Object.entries(c)) {
                                        form[key] = value
                                    }
                                })
                            }
                        } else {
                            if (!!_else) {
                                _else.forEach(c => {
                                    for (let [key, value] of Object.entries(c)) {
                                        form[key] = value
                                    }
                                })
                            }
                        }
                    })
                }

                return form
            });
            return x
        });
    }
    getSelectedItems = (value, options, type, showAttribute)=>{
        let selectedItems;
        if(type === 'multiselectdropdown'){
            selectedItems =[];
            value = value ? value :[];
            for (let i = 0; i < value.length; i++) {
                let selectedType = value && value.length > 0 ? value[i] : null;
                if (selectedType && (typeof selectedType === 'object')) {
                    if (value[i].code) {
                        let results = options.filter(function (item) {
                            return item.code === value[i].code;
                        });
                        selectedItems.push(results && (results.length > 0) ? results[0] : null);
                    }else {
                        let results = options.filter(function (item) {
                            return JSON.stringify(item) === JSON.stringify(value[i]);
                        });
                        selectedItems.push(results && (results.length > 0) ? results[0] : null);
                    }
                } else {
                    let results = options.filter(function (item) {
                        return isStringNotNull(item.code) ? (item.code === value[i]) : (item === value[i]);
                    });
                    selectedItems.push(results && (results.length > 0) ? results[0] : value[i]);
                }
            }
        }else if(type === 'dropdown'){
            if (value && (typeof value === 'object')) {
                if (isStringNotNull(value.code)) {
                    let results = options.filter(function (item) {
                        return item.code === value.code;
                    });
                    selectedItems = results && (results.length > 0) ? results[0] : null;
                }else {
                    let results = options.filter(function (item) {
                        return JSON.stringify(item) === JSON.stringify(value);
                    });
                    selectedItems = results && (results.length > 0) ? results[0] : null;
                }
            } else {
                let results = options.filter(function (item) {
                    return isStringNotNull(item.code) ? (item.code === value) : (item === value);
                });
                selectedItems = results && (results.length > 0) ? results[0] : value;
            }
        }
        return selectedItems
    };
    getInputValue = (value, defaultValue, type, inputType)=>{
        let valueToSet ='';
        if(value || value === 0){
            valueToSet = inputType === 'number' ? Number(value) :String(value).trim();
        }else if(defaultValue || defaultValue === 0){
            valueToSet = inputType === 'number' ? Number(defaultValue) : String(defaultValue).trim();
        }

        return valueToSet
    };
    getReadonlyDisplayName = (value, optionRefKey, type, isDisplayCode) =>{
        if(this.props.getReadonlyDisplayName){
           return this.props.getReadonlyDisplayName(value, optionRefKey, type);
        }else{
            let displayString = value;
            if(value){
                if(optionRefKey){
                    let staticData = this.props.staticData[optionRefKey] ? this.props.staticData[optionRefKey] :[];
                    if(Array.isArray(value)){
                        displayString =[];
                        for (let i = 0; i < value.length; i++) {
                            let filtredArr = staticData.filter(function (item) {
                                return isDisplayCode ? ((typeof value[i] === 'object') ? item.code === value[i].code : item.code === value[i]) : item.displayName === value[i];
                            });
                            if (filtredArr && filtredArr.length > 0){
                                displayString.push(filtredArr[0].displayName)
                            }
                        }
                    }else {
                        let filtredArr = staticData.filter(function (item) {
                            value = (typeof value === 'object')? (isDisplayCode ? value.code : value.displayName) : value;
                            return isDisplayCode ? item.code === value : item.displayName === value;
                        });
                        if (filtredArr && filtredArr.length > 0) {
                            displayString = filtredArr[0].displayName
                        }
                    }
                }
            }
            return displayString;
        }
    };
    removeItem = (item, type, bind) =>{
        this.props.removeItem(item, type, bind);
    };
    getValidDateValue = (value, title) =>{
        let validDate = moment(value, 'DD-MMM-YYYY', false).isValid();
        if(validDate){
            return moment.utc(value);
        }
        console.log(title +' have invalid date value: ', value);
        return null;
    };

    render() {
        const {updateValue, handleBlur, multiCheck, getReadOnly, getSelectedItems, getInputValue, getReadonlyDisplayName, getValidDateValue} = this;
        const {ready, formdata, filteredData, rowIndex} = this.state;
        const {executeConditionalsOnForm} = this;
        const {bindedEvents = {}, getDisplayName, permissions, dropDownCompOption=[], onGeneratePassword}  = this.props;
        const {theme, user} = this.props.appState;
        //const {permissions} = user;
        let disableComponent = true;

        executeConditionalsOnForm(formdata);

        return ready ? (
            <div className='formbuilder-container'>
                {formdata.map((data, index) => {
                    const {column = []} = data;
                    return (
                        <div key={index} className='formbuilder-column'>
                            {column.map((form, i) => {
                                disableComponent = true;
                                if (filteredData && rowIndex !== undefined && rowIndex !== null && form.bind && filteredData[rowIndex][form.bind]) {
                                    const dataIdx = column.findIndex(item => item.bind === form.bind);
                                    if (dataIdx !== -1 && column[dataIdx].value !== undefined) {
                                        form.value = column[dataIdx].value;
                                    } else {
                                        form.value = filteredData[rowIndex][form.bind];
                                    }
                                }
                                let {
                                    title, isValid, type = null, bind=null, defaultValue = null, value = null, prop = null, showAttribute= null,
                                    readonly = false, required = false, addtionalRequired = false, optionDefault = null, source = null, sourceId = null, altered = null,
                                    inputType = 'text', options = [], fieldsToDisplay = null, fieldSeparator = null, buttonConfig = null, render = true, min = null, max = null,
                                    onChange = null, onBlur = null, showWhen = null, displayIf = null, color, backgroundColor,readonlyIf = null,disabled=true, optionRefKey = null, isDisplayCode = false,
                                    dropdownType = null, timeWidth, minDate = null, isUpdatedBlur =false
                                } = form;
                                if(!!bindedEvents && !!readonlyIf && !!bindedEvents[readonlyIf]) {
                                    readonly = bindedEvents[readonlyIf](this.props.rowIndex,this.props.filterFunction);
                                }
                                const shouldDisplay = !!bindedEvents && !!displayIf && !!bindedEvents[displayIf] ? !!bindedEvents[displayIf]() : true;
                                if (showWhen !== null && showWhen.length && showWhen.length > 0) {
                                    showWhen.forEach(item => {
                                        if (column.findIndex(colItem => colItem.bind === item.id && colItem.value === item.value) !== -1) {
                                            disableComponent = false;
                                        }
                                    })
                                }

                                return render && shouldDisplay ? (
                                    <div className={`formbuilder-item-container ${theme === 'dark' ? 'dark' : 'light'}`} key={i}>
                                        <div className='item item-left'>
                                            {type === 'checkbox' ? (
                                                <Fragment>
                                                    <Checkbox
                                                        defaultChecked={!!value ? value : (defaultValue || false)}
                                                        checked={value} disabled={permissions.readonly || readonly}
                                                        onChange={(e) => {
                                                            (permissions.readonly || readonly) ? () => {
                                                            } : updateValue(index, i, e.target.checked, onChange)
                                                        }}
                                                        style={{transform: "translateY(5px)"}}/>
                                                    <label>
                                                        {title}{!permissions.readonly ? (<span className='astericks'>{required ? '*' : ''}</span>) : null}
                                                    </label>
                                                </Fragment>
                                            ) : (
                                                <label>
                                                    {title} {!permissions.readonly ? (addtionalRequired ? (<><span className={'astericks'}>{required ? '*' : ''}</span><span className={'blueastericks'}>&nbsp;**</span></>) : (<span className={'astericks'}>{required ? '*' : ''}</span>)) : null}
                                                </label>
                                            )}
                                        </div>

                                        <div className={`item item-center`}>
                                            {type !== 'readValues' ? (
                                                (location.href.indexOf('derivatives') > -1 || location.href.indexOf('tba') > -1) ? <span className={'readonly-pill'}>{source ? source : ''}</span> :
                                                    <span className={'readonly-pill'}>{!altered ? (source || 'DEFAULT') : 'USER'}</span>
                                            ) : null}
                                        </div>

                                        <div className={`item item-right`}>
                                            {(permissions.readonly || readonly) && (disabled || permissions.partialReadonly) ? (
                                                <Fragment>
                                                    {readonly && !permissions.readonly ? (
                                                        <span className={'readonly-pill'}> </span>
                                                    ) : null}

                                                    {(type === 'input' || type === 'textarea') && !(inputType === 'confirmpassword') ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <span className={permissions.readonly || readonly ? 'readonly' : ''}>{getInputValue(null, defaultValue, type, inputType)}</span>
                                                        </div>
                                                    ) : null}
                                                    {type === 'input' && inputType === 'confirmpassword' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <input defaultValue={!!value ? String(value).trim() : defaultValue ? String(defaultValue).trim():''}
                                                                   type={'password'}
                                                                   theme={`${theme === 'dark' ? 'dark' : 'light'}`}
                                                                   step={"any"}
                                                                   style={{backgroundColor: backgroundColor, color: color}}
                                                                   disabled={permissions.readonly || readonly}/>
                                                        </div>
                                                    ) : null}
                                                    {type === 'password' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <PasswordComponent
                                                                defaultValue={!!value ? String(value).trim() : defaultValue ? String(defaultValue).trim() : ''}
                                                                handleBlur={handleBlur}
                                                                updateValue={updateValue}
                                                                inputData={{index, i}}
                                                                step={"any"}
                                                                backgroundColor={backgroundColor} color={color}
                                                                onGeneratePassword={onGeneratePassword}
                                                                readonly={permissions.readonly || readonly ? 'readonly' :''}
                                                                min={min}
                                                                max={max}/>
                                                            {/*<span className={permissions.readonly || readonly ? 'readonly' : ''}>{!!defaultValue ? String(defaultValue) : ''}</span>*/}
                                                        </div>
                                                    ) : null}
                                                    {type === 'multiselectdropdown' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <span className={permissions.readonly || readonly ? 'readonly' : ''}>{!!defaultValue ? (getReadonlyDisplayName(defaultValue, optionRefKey, type, isDisplayCode).sort().join(', ')) : 'Nothing selected'}</span>
                                                        </div>
                                                    ) : null}

                                                    {type === 'dropdown' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <span className={permissions.readonly || readonly ? 'readonly' : ''}>{!!defaultValue ? (String(getReadonlyDisplayName(defaultValue, optionRefKey, type, isDisplayCode))) : ''}</span>
                                                        </div>
                                                    ) : null}

                                                    {type === 'dropdownComponent' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <span className={permissions.readonly || readonly ? 'readonly' : ''}>{!!defaultValue ? (String(getReadonlyDisplayName(defaultValue, optionRefKey, type, isDisplayCode))) : ''}</span>
                                                        </div>
                                                    ) : null}
                                                    {type === 'pill' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            {value && value.map((item, pillIndex) => (
                                                                <Pill label={item} style={{marginLeft:'5px', marginBottom:'5px'}}/>
                                                            ))}
                                                        </div>
                                                    ) : null}
                                                    {type === 'datepicker' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <span className={permissions.readonly || readonly ? 'readonly' : ''}>{!!defaultValue ? moment(defaultValue).format('DD-MMM-YYYY') : ''}</span>
                                                        </div>
                                                    ) : null}
                                                </Fragment>
                                            ) : (
                                                <Fragment>
                                                    {type === 'text' ? (
                                                        <span style={{width: '100%', display: 'flex'}}>{value}</span>
                                                    ) : null}

                                                    {type === 'input' ? (
                                                        <div style={{width: timeWidth ? timeWidth : '100%', display: 'flex'}}>
                                                            <input defaultValue={getInputValue(value, defaultValue, type, inputType)}
                                                                onBlur={(e) => {
                                                                    if(isUpdatedBlur && ((e?.target?.value == 0) || _.isEqual(e?.target?.value?.trim(), ''))){
                                                                        e.target.value = 1;
                                                                        updateValue(index, i, 1, onChange);
                                                                    }
                                                                    handleBlur(onBlur, String(e.target.value).trim(), index, i, inputType, max, min, title)
                                                                }}
                                                                onChange={(e) => {
                                                                    updateValue(index, i, String(e.target.value).trim(), onChange)
                                                                }}
                                                                type={inputType === 'confirmpassword' ? 'password' : inputType}
                                                                className={`${theme === 'dark' ? 'dark' : 'light'}`}
                                                                step={"any"} min={min ? min: 'any'} max={max ? max: 'any'}
                                                                style={{backgroundColor: backgroundColor, color: color}}/>
                                                        </div>
                                                    ) : null}
                                                    {type === 'password' ? (
                                                        <PasswordComponent
                                                            defaultValue={!!value ? String(value).trim() : defaultValue ? String(defaultValue).trim() : ''}
                                                            handleBlur={handleBlur}
                                                            onBlur={onBlur}
                                                            onChange={onChange}
                                                            updateValue={updateValue}
                                                            inputData={{index, i}}
                                                            inputType={inputType}
                                                            theme={`${theme === 'dark' ? 'dark' : 'light'}`}
                                                            step={"any"}
                                                            backgroundColor={backgroundColor} color={color}
                                                            onGeneratePassword={()=>{
                                                                onGeneratePassword(index, i, updateValue)
                                                            }}
                                                            readonly={permissions.readonly}
                                                            min={min}
                                                            max={max}
                                                            required={required}/>
                                                    ) : null}
                                                    {type === 'textarea' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <textarea defaultValue={!!value ? value : defaultValue} onChange={(e) => {
                                                                updateValue(index, i, e.target.value, onChange)
                                                            }} className={`${theme === 'dark' ? 'dark' : 'light'}`}/>
                                                        </div>
                                                    ) : null}
                                                    {type === 'datepicker' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <DatePicker defaultDate={!!value ? getValidDateValue(value, title) : !!defaultValue ? getValidDateValue(defaultValue, title): null}
                                                                        onDateChange={(date) => {
                                                                            updateValue(index, i, !!date ? moment(date).format('DD-MMM-YYYY') : null, onChange)
                                                                        }}
                                                                        disabled={showWhen !== null && disableComponent}
                                                                        CalendarProps={{
                                                                            isDayBlocked: minDate ? (day) => !isInclusivelyAfterDay(day, moment()) : (day) => false
                                                                        }}/>
                                                        </div>
                                                    ) : null}

                                                    {type === 'dropdown' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <section className={`${theme === 'dark' ? 'dark' : 'light'}`}>
                                                                <Dropdown
                                                                    initialSelectedItem={isStringNotNull(value) ? getSelectedItems(value, options, type, showAttribute) : ((getSelectedItems(defaultValue, options, type, showAttribute) || optionDefault) || 'Select')}
                                                                    selectedItem={isStringNotNull(value) ? getSelectedItems(value, options, type, showAttribute) : ((getSelectedItems(defaultValue, options, type, showAttribute) || optionDefault) || 'Select')}
                                                                    itemToString={(item) => item ? (getDisplayName ? getDisplayName(item, title): item) : ''}
                                                                    onChange={(e) => {
                                                                        updateValue(index, i, e, onChange)
                                                                    }}
                                                                    source={options}
                                                                    buttonWidth={300}
                                                                    ListProps={{width: 300}}
                                                                    disabled={showWhen !== null && disableComponent}
                                                                    showCheckbox={true}
                                                                />
                                                            </section>
                                                        </div>
                                                    ) : null}

                                                    {type === 'combobox' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <section className={`${theme === 'dark' ? 'dark' : 'light'}`}>
                                                                <ComboBox
                                                                    borderless
                                                                    initialSelectedItem={!!value ? value : ((defaultValue || optionDefault))}
                                                                    selectedItem={!!value ? value : ((defaultValue || optionDefault) )}
                                                                    onChange={(e) => {
                                                                        updateValue(index, i, e, onChange)
                                                                    }}
                                                                    source={options}
                                                                    inputWidth={300}
                                                                    disabled={showWhen !== null && disableComponent}
                                                                />
                                                            </section>
                                                        </div>
                                                    ) : null}

                                                    {type === 'multiselectdropdown' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <section className={`${theme === 'dark' ? 'dark' : 'light'}`}>
                                                                <MultiSelectDropdown
                                                                    initialSelectedItems={!!value ? getSelectedItems(value, options, type, showAttribute) : ((getSelectedItems(defaultValue, options, type, showAttribute) || optionDefault || []) || 'Select')}
                                                                    itemToString={(item) => item ? (getDisplayName ? getDisplayName(item): item) : ''}
                                                                    selectedItems={!!value ? getSelectedItems(value, options, type, showAttribute) : ((getSelectedItems(defaultValue, options, type, showAttribute) || optionDefault || []) || 'Select')}
                                                                    onSelect={(e) => {
                                                                        updateValue(index, i, multiCheck(index, i, e), onChange)
                                                                    }}
                                                                    source={options}
                                                                    buttonWidth={300}
                                                                    ListProps={{width: 400}}
                                                                    value={value}
                                                                    defaultValue={defaultValue}
                                                                    disabled={showWhen !== null && disableComponent}
                                                                />
                                                            </section>
                                                        </div>
                                                    ) : null}
                                                    {type === 'dropdownComponent' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            <section className={`${theme === 'dark' ? 'dark' : 'light'}`}>
                                                                <DropdownComponent
                                                                    title={title}
                                                                    value={value}
                                                                    defaultValue={defaultValue}
                                                                    inputData={{index, i}}
                                                                    options={dropDownCompOption}
                                                                    getSelectedItems={getSelectedItems}
                                                                    getDisplayName={getDisplayName}
                                                                    onChange={onChange}
                                                                    updateValue={updateValue}
                                                                    multiCheck={multiCheck}
                                                                    dropdownType={dropdownType}
                                                                />
                                                            </section>
                                                        </div>
                                                    ) : null}
                                                    {type === 'pill' ? (
                                                        <div style={{width: '100%', display: 'flex'}}>
                                                            {value && value.map((item, pillIndex) => (
                                                                <Pill label={item} onDelete={this.removeItem.bind(this, item, value, bind)} style={{marginLeft:'5px', marginBottom:'5px'}}/>
                                                            ))}
                                                        </div>
                                                    ) : null}
                                                    {type === 'readValues' ? (
                                                        <span>{getReadOnly(index, prop, showAttribute)}</span>
                                                    ) : null}

                                                    {type === 'hidden' ? null : null}

                                                    {!!buttonConfig ? (
                                                        <section style={{width: 'margin-left: 10px', marginLeft:'10px', color: 'white!important'}}>
                                                            <Button density="high" variant="cta" onClick={() => {
                                                                bindedEvents[buttonConfig.bindToFunction]();
                                                            }}>
                                                                {!!buttonConfig.text ? (
                                                                    <span>{buttonConfig.text} &nbsp;</span>
                                                                ) : null}
                                                                <Icon name={buttonConfig.icon || null} size={10}/>
                                                            </Button>
                                                        </section>
                                                    ) : null}
                                                </Fragment>
                                            )}
                                        </div>
                                    </div>
                                ) : (<span key={i}/>)
                            })}
                        </div>
                    )
                })}
            </div>
        ) : null;
    }
}

const mapStateToProps = state => {
    const {appState} = state;
    return {appState};
};

const mapDispatchToProps = dispatch => {
    return {
        appStateAction: bindActionCreators(appStateAction, dispatch)
    };
};


export default connect(mapStateToProps, mapDispatchToProps)(FormBuilder);

xyz1234
