import moment from "moment";
import React, { Component } from "react";
import autoBind from "react-autobind";
import { connect } from "react-redux";
import { bindActionCreators } from "redux";
import { configSetup, newFormBind, tableEntryUpdate } from "../../../../../../javascript/config";
import { fetchConfig } from "./config/config";
import API from '../../../api';

import {
    objectExists,
    traverseFormToBindValue,
    cloneObject,
    traverseObjectAndReturn,
    traverseObject
} from "../../../../../../javascript/utility";

import { mixinCheckGlobalConditions, mixinIsFormValid, mixinToggleModal } from "../../../../../../javascript/mixins";

import { Spinner, Dialog, DialogContent, DialogActions, Button, Icon } from "@jpmuitk/components";
import { DataGrid } from "@jpmuitk/data-grid";

import Buttons from "../../../../../Common/Buttons/Buttons";
import FormBuilder from "../../../../../Common/FormBuilder";
import Header from "../../../../../Common/Header/Header";
import AddOnProduct from "../../../../../Common/AddOnProduct/AddOnProduct";

import * as appStateAction from "../../../../../../actions/appStateAction";
import { isReadWrite } from "../../../../../../javascript/entitlementUtils";
import { MessageBox } from "../../../../../Common/messagebox";

let selectedRowIdx = null;
let editingRowData = null;
let isEditMode = false;

class XMProfileFields extends Component {
    constructor(props) {
        super(props);

        this.state = {
            permissions: {
                readonly: this.getPermission(props),
            },
            config: null,
            toggleState: true,
            ready: true,
            selectedRows: [],
            gridApi: {}, // Store grid APIs like DCM
            modal: {
                disabled: null,
                show: false,
                header: {},
                formdata: null,
                onUpdate: () => { },
                onSave: () => { },
            },
            resetFormFields: {
                resetIfSelected: [{ field: "frequency", value: "*" }],
                resetExclude: ["frequency"],
            },
        };

        this.bindedEvents = {
            CREATE_NEW_MASTER_AGREEMENT: () => {
                this.openMasterAgreementModal(false);
            },
            DELETE_SELECTED_MASTER_AGREEMENTS: () => {
                this.deleteSelectedRows();
            },
            VALIDATE_ECI_ON_BLUR :()=>{
                this.validateEciOnBlur();
            },
            VALIDATE_TIER_ON_BLUR:()=>{
                this.validateTierOnBlur();
            },
            VALIDATE_HOUSE_MULTIPLIER_ON_BLUR :()=>{
                this.validateHouseMultiplierOnBlur();
            }
        };

        autoBind(this);

        this.buttons = this.state.permissions.readonly
            ? [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
            ]
            : [
                {
                    title: "Back",
                    onclick: this.props.onBack || this.props.onCancel,
                },
                { title: "Cancel", onclick: this.props.onCancel },
                {
                    title: "Save Draft",
                    onclick: this.props.onSave,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Submit",
                    onclick: this.handleSubmit,
                    displayIf: this.isProfileNewOrActive.bind(this),
                },
                {
                    title: "Deactivate",
                    onclick: this.props.onDeactivate,
                    displayIf: this.isProfileActive.bind(this),
                },
                {
                    title: "Activate",
                    onclick: this.props.onActivate,
                    displayIf: this.isProfileInactive.bind(this),
                },
            ];
    }

    openMasterAgreementModal = (editMode = false) => {
        const data = this.props.data || this.props.profileData || {};
        let newEntry = null;

        selectedRowIdx = null;
        editingRowData = null;
        isEditMode = editMode;

        if (editMode) {
            const { selectedRows } = this.state;
            if (selectedRows.length === 0) {
                MessageBox.info('No Selection', 'Please select a row to edit.');
                return;
            }
            if (selectedRows.length > 1) {
                MessageBox.info('Multiple Selection', 'Please select only one row to edit.');
                return;
            }
            editingRowData = selectedRows[0];
        }

        let formData = newFormBind({ formdata: this.state.config.create.newMasterAgreements });

        if (editMode && editingRowData) {
            formData = this.prepopulateFormData(formData, editingRowData);
        }

        this.toggleModal({
            state: true,
            header: { title: editMode ? 'Edit Master Agreement' : 'Add New Master Agreement' },
            formdata: formData,
            onUpdate: (newdata) => {
                newEntry = tableEntryUpdate({ newdata, markSource: true });
            },
            onSave: async () => {
                this.setState({ resetTable: true }, async () => {
                    try {
                        const validationData = {
                            lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                            agreementId: newEntry.agreementId?.value || '',
                            profileType: newEntry.agreementType?.value || '',
                            legalEntityId: newEntry.legalEntityId?.value || '',
                            legalEntity: newEntry.legalEntity?.value || ''
                        };

                        if (!validationData.agreementId || !validationData.lineOfBusiness || !validationData.legalEntityId) {
                            MessageBox.error('Validation Error', 'Please fill in all required fields before saving.', 500);
                            this.setState({ resetTable: false });
                            return;
                        }

                        this.setState({ modal: { ...this.state.modal, disabled: true } });

                        try {
                            const validationResult = await API.validateMasterAgreement(validationData, this.props.appState?.lob?.toUpperCase() || 'XM');
                            
                            this.setState({ modal: { ...this.state.modal, disabled: false } });

                            if (!validationResult.success) {
                                MessageBox.error('Validation Failed', validationResult.reason || 'The master agreement data could not be validated. Please check your entries and try again.', 500);
                                this.setState({ resetTable: false });
                                return;
                            }
                        } catch (apiError) {
                            console.warn('API validation failed, proceeding anyway:', apiError);
                            this.setState({ modal: { ...this.state.modal, disabled: false } });
                        }

                        let exists = false;
                        let formData = cloneObject(data);

                        if (!formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
                            this.initializeProfileData(formData);
                        }

                        const currentAgreements = formData.compositeProfile.legalAgreement.attributes.masterAgreements;

                        if (currentAgreements) {
                            currentAgreements.forEach((item, index) => {
                                if (item.agreementId === newEntry.agreementId?.value) {
                                    if (!isEditMode || (isEditMode && JSON.stringify(item) !== JSON.stringify(editingRowData))) {
                                        exists = true;
                                        MessageBox.error('Validation Error', 'Agreement ID already exists. Please enter a unique Agreement ID.', 500);
                                    }
                                }
                            });
                        }

                        if (!exists) {
                            if (isEditMode) {
                                const updatedAgreement = {
                                    ...editingRowData,
                                    lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                    agreementId: newEntry.agreementId?.value || '',
                                    profileType: newEntry.agreementType?.value || '',
                                    legalEntityId: newEntry.legalEntityId?.value || '',
                                    legalEntity: newEntry.legalEntity?.value || '',
                                    updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                    updatedBy: this.props.userInfo?.username || 'system'
                                };

                                const agreementIndex = currentAgreements.findIndex(item =>
                                    JSON.stringify(item) === JSON.stringify(editingRowData)
                                );

                                if (agreementIndex !== -1) {
                                    formData.compositeProfile.legalAgreement.attributes.masterAgreements[agreementIndex] = updatedAgreement;
                                }

                                MessageBox.alert('Success', 'Master agreement has been updated successfully.', 500);
                            } else {
                                const newAgreement = {
                                    lineOfBusiness: newEntry.lineOfBusiness?.value || '',
                                    agreementId: newEntry.agreementId?.value || '',
                                    profileType: newEntry.agreementType?.value || '',
                                    legalEntityId: newEntry.legalEntityId?.value || '',
                                    legalEntity: newEntry.legalEntity?.value || '',
                                    status: newEntry.status?.value || 'LIVE',
                                    createdAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                    updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                                    createdBy: this.props.userInfo?.username || 'system'
                                };

                                formData.compositeProfile.legalAgreement.attributes.masterAgreements.push(newAgreement);
                                MessageBox.alert('Success', 'Master agreement has been validated and added successfully.', 500);
                            }

                            this.toggleModal({ state: false });

                            // Update parent data (like DCM pattern)
                            if (this.props.onCustFormUpdate) {
                                this.props.onCustFormUpdate(formData);
                            }

                            // Update grid directly (like DCM pattern)
                            if (this.state.gridApi["masterAgreements"]) {
                                this.state.gridApi["masterAgreements"].setRowData(
                                    formData.compositeProfile.legalAgreement.attributes.masterAgreements
                                );
                            }

                            this.setState({ resetTable: false, selectedRows: [] });
                        } else {
                            this.setState({ resetTable: false });
                        }

                    } catch (error) {
                        console.error('Validation error:', error);
                        MessageBox.error('System Error', 'An unexpected error occurred during validation. Please try again.', 500);
                        this.setState({
                            resetTable: false,
                            modal: { ...this.state.modal, disabled: false }
                        });
                    }
                });
            }
        });
    };

    prepopulateFormData = (formData, rowData) => {
        let populatedFormData = cloneObject(formData);

        if (populatedFormData.data && populatedFormData.data[0] && populatedFormData.data[0].column) {
            populatedFormData.data[0].column.forEach(field => {
                switch (field.bind) {
                    case 'lineOfBusiness':
                        field.value = rowData.lineOfBusiness || '';
                        break;
                    case 'agreementId':
                        field.value = rowData.agreementId || '';
                        break;
                    case 'agreementType':
                        field.value = rowData.profileType || '';
                        break;
                    case 'legalEntityId':
                        field.value = rowData.legalEntityId || '';
                        break;
                    case 'legalEntity':
                        field.value = rowData.legalEntity || '';
                        break;
                    case 'eci':
                        field.value = rowData.eci || '';
                        break;
                    default:
                        break;
                }
            });
        }

        return populatedFormData;
    };

    getPermission(props) {
        const profileReadOnly = props.data?.profileReadOnly || false;
        const userHasWriteAccess = isReadWrite(props.userInfo, "ROLE_AGENCY_UI_READ_WRITE");
        return profileReadOnly || !userHasWriteAccess;
    }

    isProfileNewOrActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return !profilePresent || status === "Live" || status === "New";
    }

    isProfileActive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Live";
    }

    isProfileInactive() {
        const data = this.props.data || {};
        const profilePresent = objectExists(data, "compositeProfile.legalAgreement.attributes.status");
        const status = data.compositeProfile?.legalAgreement?.attributes?.status;
        return profilePresent && status === "Inactive";
    }

    componentDidMount() {
        try {
            const config = fetchConfig(this.props.appState?.lob || "xm");
            this.setup(config);
        } catch (error) {
            const fallbackConfig = {
                layout: [
                    {
                        refKey: "agreement",
                        header: { title: "XM Profile Information" },
                        type: "form",
                        data: [],
                    },
                ],
                create: {
                    newMasterAgreements: {
                        data: [{ column: [] }]
                    }
                }
            };
            this.setup(fallbackConfig);
        }
    }

    // Remove componentDidUpdate entirely - let grid API handle updates
    
    setup = (config) => {
        let cloneData = cloneObject(this.props.data || {});
        this.initializeProfileData(cloneData);

        let configSetupVar = configSetup({
            config,
            formdata: cloneData,
            staticData: this.props.staticData,
            bindFunctions: this.bindedEvents,
        });

        this.setState({ config: configSetupVar });

        if (this.props.onCustFormUpdate) {
            this.props.onCustFormUpdate(cloneData);
        }
    };

    initializeProfileData = (data) => {
        if (!data.compositeProfile) {
            data.compositeProfile = {};
        }

        if (!data.compositeProfile.legalAgreement) {
            data.compositeProfile.legalAgreement = {
                profileId: "",
                profileType: "",
                version: 0,
                updatedBy: "",
                updatedAt: moment().format("YYYY-MM-DD HH:mm:ss.SSS"),
                attributes: {},
            };
        }

        if (!data.compositeProfile.legalAgreement.attributes) {
            data.compositeProfile.legalAgreement.attributes = {
                agreementType: "",
                spn: "",
                ecd: "",
                tier: "",
                tierVersion: "",
                tierEffectiveDate: "",
                addOn: '',
                houseMultiplier: "",
                status: "New",
            };
        }

        if (typeof data.compositeProfile.legalAgreement.version == "number") {
            data.compositeProfile.legalAgreement.version = data.compositeProfile.legalAgreement.version.toString();
        }

        if (!data.compositeProfile.legalAgreement.attributes.masterAgreements) {
            data.compositeProfile.legalAgreement.attributes.masterAgreements = [];
        }

        if (data.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value) {
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.eci) {
                data.compositeProfile.legalAgreement.attributes.eci =
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.eci;
            }
            if (data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0]?.counterParty?.spn) {
                data.compositeProfile.legalAgreement.attributes.spn =
                    data.compositeProfile.legalAgreement.attributes.crossMarginEntities.value[0].counterParty.spn;
            }

            let legalAgreementProfiles = this.processLegalAgreementProfiles(data);
            data.compositeProfile.legalAgreement.attributes.masterAgreements = legalAgreementProfiles;
        }
    };

    // DCM pattern for onGridReady
    onGridReady = ({ e, refKey }) => {
        const { gridApi } = this.state;
        const { api } = e;

        gridApi[refKey] = api;

        this.setState({ gridApi }, () => {
            setTimeout(() => {
                api.sizeColumnsToFit();
            }, 100);

            if (refKey === "masterAgreements") {
                api.addEventListener('selectionChanged', this.onSelectionChanged);
                api.addEventListener('cellDoubleClicked', this.onCellDoubleClicked);
            }
        });
    };

    onCellDoubleClicked = (event) => {
        if (!this.state.permissions.readonly) {
            const rowData = event.data;
            this.setState({ selectedRows: [rowData] }, () => {
                this.openMasterAgreementModal(true);
            });
        }
    };

    onSelectionChanged = () => {
        const selectedNodes = this.state.gridApi["masterAgreements"]?.getSelectedNodes() || [];
        const selectedRows = selectedNodes.map(node => node.data);
        this.setState({ selectedRows });
    };

    // DCM pattern for deletion
    deleteSelectedRows = () => {
        const { selectedRows } = this.state;

        if (selectedRows.length === 0) {
            MessageBox.info('No Selection', 'Please select one or more rows to delete.');
            return;
        }

        const { data } = this.props;
        const { gridApi } = this.state;
        const api = gridApi["masterAgreements"];

        // Clone data and get current agreements
        let formData = cloneObject(data || {});
        
        if (!formData.compositeProfile?.legalAgreement?.attributes?.masterAgreements) {
            this.initializeProfileData(formData);
        }

        const currentAgreements = formData.compositeProfile.legalAgreement.attributes.masterAgreements;
        
        // Filter out selected rows
        const updatedAgreements = currentAgreements.filter(agreement =>
            !selectedRows.some(selectedRow =>
                JSON.stringify(agreement) === JSON.stringify(selectedRow)
            )
        );

        // Update the form data
        formData.compositeProfile.legalAgreement.attributes.masterAgreements = updatedAgreements;

        // Update parent data (like DCM pattern)
        if (this.props.onCustFormUpdate) {
            this.props.onCustFormUpdate(formData);
        }

        // Update grid directly (like DCM pattern)
        if (api) {
            api.setRowData(updatedAgreements);
        }

        this.setState({ selectedRows: [] });
    };

    validateEciOnBlur = async () => {

    };

    validateHouseMultiplierOnBlur = () => {
        this.validateFieldOnBlur('House Multiplier', 0, 100, 'House Multiplier value cannot be less than 0. It has been reset to 0.', 'House Multiplier value cannot be greater than 100. It has been reset to 100.');
    };

    validateTierOnBlur = () => {
        this.validateFieldOnBlur('Tier', 1, 9, 'Tier value cannot be less than 1. It has been reset to 1.', 'Tier value cannot be greater than 9. It has been reset to 9.');
    };

    validateFieldOnBlur = (fieldTitle, minValue, maxValue, minErrorMessage, maxErrorMessage) => {
        let clone = cloneObject(this.state.config);
        clone.layout.find(x => x.refKey === 'crossMarginEntities').data.forEach(x => {
            x.column.forEach(form => {
                if (form.title === fieldTitle && form.value !== undefined) {
                    if (form.value === "" || form.value === null || typeof form.value === "undefined") {
                        return;
                    }
                    let newValue = form.value;
                    if (newValue < minValue) {
                        newValue = minValue;
                        form.value = newValue;
                        MessageBox.error('Validation Error', minErrorMessage, 500);
                    } else if (newValue > maxValue) {
                        newValue = maxValue;
                        form.value = newValue;
                        MessageBox.error('Validation Error', maxErrorMessage, 500);
                    }
                }
            });
        });
        this.setState({ config: clone, ready: false }, () => {
            this.setState({ ready: true });
        });
    }

    isFormValid = (props) => {
        mixinIsFormValid({ ...props, _this: this });
    };

    toggleModal = (props) => {
        mixinToggleModal({ ...props, _this: this });
    };

    checkGlobalConditions = (renderIf = null) => {
        return mixinCheckGlobalConditions({ renderIf, _this: this });
    };

    handleSubmit = () => {
        if (this.props.onSubmit) {
            this.props.onSubmit();
        }
    };

    getCurrentFormData = () => {
        return this.props.data || {};
    };

    render() {
        const {
            buttons,
            bindedEvents,
            checkGlobalConditions,
            toggleModal,
            onGridReady,
            isFormValid,
        } = this;

        const { ready, modal, config, permissions, selectedRows } = this.state;
        const { onFormUpdate, onCustFormUpdate, staticData } = this.props;

        let formData = this.props.data || {};

        return (
            <div style={{ marginTop: "10px", marginBottom: "10px" }}>
                {!!config && ready ? (
                    <>
                        {config.layout.map((x, i) => {
                            const {
                                refKey,
                                header,
                                type,
                                data,
                                columnDefs,
                                renderIf,
                                bind,
                                rowClassRules,
                            } = x;

                            return checkGlobalConditions(renderIf) ? (
                                <div
                                    className="dt-container"
                                    key={i}
                                >
                                    {!!header ? (
                                        <div>
                                            <Header
                                                {...header}
                                                bindedEvents={bindedEvents}
                                                permissions={permissions}
                                            />
                                        </div>
                                    ) : null}

                                    {!!type && type === "form" ? (
                                        <FormBuilder
                                            data={data}
                                            onFormUpdate={(updatedData) => {
                                                if (onFormUpdate) {
                                                    onFormUpdate(updatedData);
                                                }
                                                if (this.props.onCustFormUpdate) {
                                                    this.props.onCustFormUpdate(updatedData);
                                                }
                                            }}
                                            bindedEvents={{
                                                ...bindedEvents
                                            }}
                                            permissions={permissions}
                                            staticData={staticData}
                                            renderComponent={(type, bind, containerIndex, formIndex) => {
                                                if (type === 'component' && bind.includes('addOn')) {
                                                    return (
                                                        <AddOnProduct
                                                            bind={bind}
                                                            formData={formData}
                                                            onCustFormUpdate={onCustFormUpdate}
                                                            bindedEvents={bindedEvents}
                                                            config={this.state.config}
                                                        />
                                                    );
                                                }
                                                return null;
                                            }}
                                        />
                                    ) : null}

                                    {!!type && type === "datatable" ? (
                                        <DataGrid
                                            suppressRowClickSelection={false}
                                            rowSelection="multiple"
                                            rowMultiSelectWithClick={true}
                                            headerCheckboxSelection={true}
                                            headerCheckboxSelectionFilteredOnly={true}
                                            containerProps={{
                                                style: { height: "200px" },
                                            }}
                                            rowStripes
                                            columnDefs={columnDefs?.map(col => ({
                                                ...col,
                                                editable: false,
                                                checkboxSelection: col.field === "lineOfBusiness" ? true : false,
                                                headerCheckboxSelection: col.field === "lineOfBusiness" ? true : false,
                                            }))}
                                            rowData={traverseFormToBindValue({ formData, bind }) || []}
                                            onGridReady={(e) => {
                                                onGridReady({ e, refKey });
                                            }}
                                            refKey={refKey}
                                        />
                                    ) : null}
                                </div>
                            ) : null;
                        })}

                        <Dialog
                            onEntered={() => { }}
                            open={modal.show}
                            onClick={() => { }}
                            onClose={() => { toggleModal(false) }}
                        >
                            <div>
                                {!!modal.show ? (
                                    <DialogContent>
                                        <div className='dt-container'>
                                            <Header {...modal.header} permissions={permissions} />
                                            <FormBuilder
                                                data={this.state.modal.formdata?.data || []}
                                                onFormUpdate={modal.onUpdate}
                                                isFormValid={isFormValid}
                                                selectedRowIdx={selectedRowIdx}
                                                gridApi={this.state.gridApi}
                                                resetFormFields={this.state.resetFormFields}
                                                permissions={permissions}
                                                staticData={staticData}
                                            />
                                        </div>
                                    </DialogContent>
                                ) : null}

                                <DialogActions>
                                    {!permissions.readonly ? (
                                        <Button variant={'cta'} disabled={modal.disabled} onClick={modal.onSave}>
                                            Save
                                        </Button>
                                    ) : null}
                                    <Button variant={'cta'} onClick={() => { toggleModal(false) }}>
                                        Close
                                    </Button>
                                </DialogActions>
                            </div>
                        </Dialog>

                        <Buttons data={buttons} />
                    </>
                ) : (
                    <div style={{ padding: "20px", textAlign: "center" }}>
                        <Spinner />
                        <p>Loading XM Profile configuration...</p>
                    </div>
                )}
            </div>
        );
    }

    processLegalAgreementProfiles = (data) => {
        let legalAgreementProfiles = [];
        const crossMarginStats = data?.compositeProfile?.legalAgreement?.attributes?.crossMarginEntities?.value;

        if (Array.isArray(crossMarginStats) && crossMarginStats.length > 0) {
            crossMarginStats.forEach((statItem) => {
                const legalEntities = statItem?.legalEntities;
                if (Array.isArray(legalEntities) && legalEntities.length > 0) {
                    legalEntities.forEach((entity) => {
                        const profilesObj = entity?.legalAgreementProfiles;
                        const legalEntity=entity?.legalEntity;
                        if (profilesObj && typeof profilesObj === 'object') {
                            Object.keys(profilesObj).forEach(agreementType => {
                                const profiles = profilesObj[agreementType];
                                if (Array.isArray(profiles)) {
                                    profiles.forEach((profile, index) => {
                                        legalAgreementProfiles.push({
                                            agreementId: profile.profileId,
                                            lineOfBusiness: profile.lineOfBusiness,
                                            agreementCategory: agreementType,
                                            profileType: profile.profileType,
                                            legalEntityName: profile.lineOfBusiness,
                                            status: profile.profileStatus,
                                            updatedBy: profile.updatedBy,
                                            updatedAt: profile.updatedAt,
                                            createdBy: profile.createdBy,
                                            version: profile.version,
                                            eci:legalEntity.eci,
                                            _originalData: profile,
                                            _agreementType: agreementType
                                        });
                                    });
                                }
                            });
                        }
                    });
                }
            });
        }

        return legalAgreementProfiles;
    };
}

const mapStateToProps = (state) => {
    const { appState } = state;
    return { appState };
};

const mapDispatchToProps = (dispatch) => {
    return {
        appStateAction: bindActionCreators(appStateAction, dispatch),
    };
};

export default connect(mapStateToProps, mapDispatchToProps)(XMProfileFields);
